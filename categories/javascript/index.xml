<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Hwantage world</title>
    <link>https://hwantage.github.io/categories/javascript/</link>
    <description>Recent content in JavaScript on Hwantage world</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>{year}</copyright>
    <lastBuildDate>Tue, 21 May 2024 15:06:52 +0900</lastBuildDate>
    <atom:link href="https://hwantage.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript 메모리 영역</title>
      <link>https://hwantage.github.io/posts/jsmemory/</link>
      <pubDate>Tue, 21 May 2024 15:06:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/jsmemory/</guid>
      <description>&lt;h1 id=&#34;javascript-메모리-영역&#34;&gt;Javascript 메모리 영역&lt;/h1&gt;&#xA;&lt;p&gt;자바스크립트에서는 두 가지의 메모리 영역을 사용한다. Call stack 과 Memory heap 영역이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>크롬 익스텐션 개발기</title>
      <link>https://hwantage.github.io/posts/chrome-extension/</link>
      <pubDate>Mon, 12 Feb 2024 14:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/chrome-extension/</guid>
      <description>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;&#xA;&lt;p&gt;라이선스 발급 취소 사유 메일 발송 크롬 익스텐션 개발 후기.&lt;/p&gt;&#xA;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;&#xA;&lt;p&gt;사내 라이선스 센터 발급 취소시 발급 취소 사유를 이메일로 발송하는 기능에 대한 요구사항으로 개발을 진행했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript 성능 향상 코딩 팁</title>
      <link>https://hwantage.github.io/posts/js-performance-coding/</link>
      <pubDate>Tue, 23 Jan 2024 14:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/js-performance-coding/</guid>
      <description>&lt;h2 id=&#34;자바스크립트-성능-측정-방법&#34;&gt;자바스크립트 성능 측정 방법&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;console.time&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.time(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 여러가지 로직 수행&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.timeEnd(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.time(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;t1&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 다양한 로직 수행&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.timeEnd(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;t1&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;7468.280029296875&lt;/span&gt; ms&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&#xA;&lt;li&gt;performance.now&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; t1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; performance.now();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 여러가지 로직 수행&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; t2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; performance.now();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;소요 시간: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (t2 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; t1) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ms&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;소요 시간&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5976.399999976158&lt;/span&gt;ms&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;console.time 이 더 사용하기 쉬우나 비표준이므로 디버깅 용도로만 사용할 것. 프로덕션 환경에서는 사용하지 않는 것이 좋다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript find, findIndex, filter</title>
      <link>https://hwantage.github.io/posts/js-find/</link>
      <pubDate>Mon, 22 Jan 2024 14:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/js-find/</guid>
      <description>&lt;h2 id=&#34;find&#34;&gt;find&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/strong&gt; 메서드는 주어진 판별 함수를 만족하는 &lt;strong&gt;첫 번째 요소&lt;/strong&gt; 의 &lt;strong&gt;값&lt;/strong&gt;을 반환합니다. 그런 요소가 없다면 &lt;code&gt;undefined&lt;/code&gt;를 반환합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript 직렬화(serialization)</title>
      <link>https://hwantage.github.io/posts/js-serialization/</link>
      <pubDate>Mon, 22 Jan 2024 14:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/js-serialization/</guid>
      <description>&lt;p&gt;직렬화의 의미는 자바스크립트의 메모리 상에 존재하는 Object 나 데이터 구조를 다른 용도로 사용하기 위해 포맷을 변환하는 것.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript 템플릿 리터럴(Template literal)</title>
      <link>https://hwantage.github.io/posts/js-template-literal/</link>
      <pubDate>Mon, 22 Jan 2024 14:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/js-template-literal/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;ES6는 템플릿 리터럴(Template literal)이라고 불리는 새로운 문자열 표기법을 도입하였습니다. 템플릿 리터럴은 일반 문자열과 비슷해 보이지만, ‘ 또는 “ 같은 통상적인 따옴표 문자 대신 &lt;code&gt;백틱(backtick) 문자&lt;/code&gt; `를 사용합니다. 템플릿 리터럴은 + 연산자를 사용하지 않아도 간단한 방법으로 새로운 문자열을 삽입할 수 있는 기능을 제공합니다. 이를 문자열 인터폴레이션(String Interpolation)이라 합니다. 문자열 인터폴레이션은 ${}으로 표현식을 감싸 사용합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript 함수 선언 방법과 호이스팅</title>
      <link>https://hwantage.github.io/posts/js-function/</link>
      <pubDate>Mon, 22 Jan 2024 14:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/js-function/</guid>
      <description>&lt;h2 id=&#34;함수-선언-방법&#34;&gt;함수 선언 방법&lt;/h2&gt;&#xA;&lt;h3 id=&#34;함수선언문-function-declaration&#34;&gt;함수선언문 (Function Declaration)&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 일반적인 함수 선언 방법&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; add(a, b) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;함수표현식-function-expression&#34;&gt;함수표현식 (Function expression)&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// arrow function으로 함수표현식 선언 방법&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {  } &lt;span style=&#34;color:#6272a4&#34;&gt;// 매개변수가 없을 경우&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x =&amp;gt; { } &lt;span style=&#34;color:#6272a4&#34;&gt;// 매개변수가 한 개인 경우, 소괄호를 생략 가능&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (x, y) =&amp;gt; { } &lt;span style=&#34;color:#6272a4&#34;&gt;// 매개변수가 여러 개인 경우, 소괄호를 생략 불가&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Body 전개 방법&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc4 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x =&amp;gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; }  &lt;span style=&#34;color:#6272a4&#34;&gt;// single line block&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc5 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x =&amp;gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;             &lt;span style=&#34;color:#6272a4&#34;&gt;// 함수 몸체가 한줄의 구문이라면 중괄호 생략 가능 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc6 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; { a&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; }}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myFunc7 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; ({ a&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; }) &lt;span style=&#34;color:#6272a4&#34;&gt;// 위 표현과 동일. 객체 반환시는 소괄호를 사용.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;호이스팅hoisting&#34;&gt;호이스팅(hoisting)&lt;/h2&gt;&#xA;&lt;p&gt;예제 부터 보면&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript 비구조화 할당</title>
      <link>https://hwantage.github.io/posts/js-destructuring-assignment/</link>
      <pubDate>Mon, 22 Jan 2024 13:14:52 +0900</pubDate>
      <guid>https://hwantage.github.io/posts/js-destructuring-assignment/</guid>
      <description>&lt;h2 id=&#34;정의&#34;&gt;정의&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;비구조화 할당(destructuring assignment) 구문은 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트 표현식(expression)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
