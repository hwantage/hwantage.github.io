/*!
 * hansearch
 * Copyright(c) 2024 hwantage
 * MIT Licensed
 */(function(e,t){typeof define=="function"&&define.amd?define([],t):typeof exports=="object"&&typeof exports.nodeName!="string"?module.exports=t():e.hansearch=t()})(typeof self!="undefined"?self:this,function(){const s=["ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"],a=["ㅏ","ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ","ㅠ","ㅡ","ㅢ","ㅣ"],r=["","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅁ","ㅂ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"],e={ㄳ:"ㄱㅅ",ㄵ:"ㄴㅈ",ㄶ:"ㄴㅎ",ㄺ:"ㄹㄱ",ㄻ:"ㄹㅁ",ㄼ:"ㄹㅂ",ㄽ:"ㄹㅅ",ㄾ:"ㄹㅌ",ㄿ:"ㄹㅍ",ㅀ:"ㄹㅎ",ㅄ:"ㅂㅅ"},o="가".charCodeAt(),t=Math.floor("까".charCodeAt()-"가".charCodeAt()),n=Math.floor("개".charCodeAt()-"가".charCodeAt()),c=(e,s,i)=>String.fromCharCode(o+e*t+s*n+i),d=(e="")=>{const t=e.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1"),n=s.reduce((e,t,n)=>e.replace(new RegExp(t,"g"),`[${c(n,0,0)}-${c(n+1,0,-1)}]`),t);return new RegExp(`(${n})`,"ig")},i=(e,i,c)=>String.fromCharCode(o+s.indexOf(e)*t+a.indexOf(i)*n+(c?r.indexOf(c):0)),l=(c="")=>{let d=[],l=c.slice(0,-1);const u=c.slice(-1);if(d.push(c),l&&(l=l.split("").map(t=>e.hasOwnProperty(t)?e[t]:t).join(""),l!==l.split("").join("")&&d.push(l)),u>="가"&&u<="힣"){{const h=u.charCodeAt()-o,g=Math.floor(h/t),v=Math.floor(h%t/n),p=h%n,m=s[g],f=a[v],c=r[p];if(p>0)if(e.hasOwnProperty(c)){const t=i(m,f,e[c][0]);d.push(l+t),d.push(l+t+e[c][1])}else d.push(l+i(m,f)),d.push(l+i(m,f)+c)}}else e.hasOwnProperty(u)&&d.push(l+e[u]);return l+u!==c&&d.push(l+u),d},u=(e,t,n)=>{let s=[],o=null;Array.isArray(n)?s=n:typeof n=="object"&&n!==null&&"keys"in n?s=n.keys:s=[],typeof n=="object"&&n!==null&&"mode"in n?n.mode==="exact"?o=[t]:o=l(t):o=l(t);const i=o.map(e=>d(e)).filter(e=>e);console.log(o,i);let a=e.filter(e=>{for(const t in e)if(e.hasOwnProperty(t)&&(s.length===0||s.includes(t))&&i.some(n=>n.test(e[t])))return!0;return!1});return{items:a,mark:(e="mark")=>({items:a.map(t=>{const n={};for(const o in t)t.hasOwnProperty(o)&&(s.length===0||s.includes(o)?Array.isArray(t[o])?n[o]=t[o].map(t=>i.reduceRight((t,n)=>t.replace(n,`<${e}>$&</${e}>`),t)):n[o]=i.reduceRight((t,n)=>t.replace(n,`<${e}>$&</${e}>`),t[o]):n[o]=t[o]);return n})})}};return u})